/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \title Enginio C++ Examples - Todos
    \example todos-cpp
    \brief The Todo example shows the \l {EnginioModelCpp}{EnginioModel} usage together with QtWigets
    \ingroup enginio-examples
    \inmodule enginio-qt

    In this example a simple list of objects is displayed in a \l QListView.
    Each item in the list is a "To Do" object which can be "done" or "not yet done".
    Todos can be added, removed or altered.

    In this simple schema the objects will have two properties that are added
    to the default properties (such as creation date which always exists).
    A string "title" and a bool "completed". The object type will be created
    when a call to create, or in this case EnginoModel::append() is made.

    A todo object will look like this (in JSON):
    \code
{
  "title": "Buy Milk",
  "completed": false
}
    \endcode

    The first step is to create a TodosModel which inherits \l {EnginioModelCpp}{EnginioModel}
    and defines the main roles which we will be used. As we are intereseted in To Do \c title
    and \c completed information we need to define these two roles.
    \snippet todos-cpp/todosmodel.h definition

    The newly created model is empty and it doesn't defines any roles. Roles are dynamicly created
    based on the json data-structure and they have no predefined value in the \l Qt::ItemDataRole enum.
    \l {EnginioModelCpp}{EnginioModel} automatically populates itself as soon it has the
    \l{EnginioModel::query}{query} and \l{EnginioModel::enginio}{enginio} and properties set. When the data is downloaded,
    the model resets itself, and sets up the internal data cache and roles names. Therefore we need
    to connect the reset signal in the constructor:

    \snippet todos-cpp/todosmodel.cpp resetRoles

    to a slot that will query them and setup the role ids.

    \snippet todos-cpp/todosmodel.cpp updateRoles

    By default \l {EnginioModelCpp}{EnginioModel} operates on \l{QJsonValue} and that is
    what the \l{EnginioModel::data()}{data()} function returns inside the \l QVariant, but standard
    views such as \l QListView are using predefined roles which does not map directly
    to our roles. That is why we need to write a mapping between them:

    \snippet todos-cpp/todosmodel.cpp data

    As we have our model defined, we need to create an instance of \l EnginioClient:

    \snippet todos-cpp/mainwindow.cpp client

    It is used by model to connect to Enginio backend. Next we need to construct
    and configure our model too. The configuration is based on two steps, assigning
    \l EnginioClient instance and by creating a query.

    \snippet todos-cpp/mainwindow.cpp model

    The model has to be assigned to a view, in our case it it is a \l QListView.

    \snippet todos-cpp/mainwindow.cpp assignModel

    At this point we are supposed to have working read only View / Model setup. To be able to 
    modify the model we need to write one more function in model \l{EnginioModel::setData()}{EnginioModel::setData()}.
    By default \l QListView is using \l{Qt::ItemDataRole} when a user decide to edit
    a data content. We need to map that role to our "title" role and call
    \l {EnginioModel::setProperty}{EnginioModel::setProperty()}
    to update the data, like that:

    \snippet todos-cpp/todosmodel.cpp setData

    To make the application fully functional, way to adding and removing "To Dos" is needed.
    To do it we need to connect correct buttons to slots, for adding new item:

    \snippet todos-cpp/mainwindow.cpp appendItem

    and for removing it:

    \snippet todos-cpp/mainwindow.cpp removeItem
*/
